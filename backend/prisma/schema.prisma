generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(uuid())
  password       String?
  username       String?       @unique
  role           Role?
  fullName       String?
  wcaUserId      Int?
  isWcaAdmin     Boolean       @default(false)
  wcaAccessToken String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  quickActions   QuickAction[]
  Attempt        Attempt[]
}

model Person {
  id            String          @id @default(uuid())
  registrantId  Int?            @unique
  name          String
  wcaId         String?
  countryIso2   String?
  gender        String?
  canCompete    Boolean         @default(true)
  birthdate     DateTime?
  checkedInAt   DateTime?
  cardId        String?         @unique
  Result        Result[]
  Attempt       Attempt[]
  StaffActivity StaffActivity[]
}

model StaffActivity {
  id         String    @id @default(uuid())
  personId   String
  person     Person    @relation(fields: [personId], references: [id], onDelete: Cascade)
  deviceId   String?
  device     Device?   @relation(fields: [deviceId], references: [id])
  isAssigned Boolean   @default(false)
  isPresent  Boolean   @default(false)
  groupId    String
  role       StaffRole
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@unique([personId, groupId, role])
}

model Competition {
  id                        String                  @id @default(uuid())
  wcaId                     String
  sendingResultsFrequency   SendingResultsFrequency
  name                      String
  countryIso2               String?
  shouldUpdateDevices       Boolean                 @default(false)
  shouldChangeGroupsAutomatically Boolean          @default(false)
  wifiSsid                  String?
  wifiPassword              String?
  wcif                      Json?
  scoretakingToken          String?
  scoretakingTokenUpdatedAt DateTime?
  cubingContestsToken       String?
}

model UnofficialEvent {
  id        String   @id @default(uuid())
  eventId   String   @unique
  wcif      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id             String   @id @default(uuid())
  name           String
  color          String
  currentGroupId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  devices        Device[]
}

model Result {
  id        String    @id @default(uuid())
  personId  String
  person    Person    @relation(fields: [personId], references: [id], onDelete: Cascade)
  eventId   String
  roundId   String
  isDoubleChecked Boolean @default(false)
  attempts  Attempt[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([personId, roundId])
}

model Attempt {
  id             String        @id @default(uuid())
  sessionId      String?
  resultId       String
  result         Result?       @relation(fields: [resultId], references: [id], onDelete: Cascade)
  attemptNumber  Int
  replacedBy     Int?
  comment        String?
  type           AttemptType   @default(STANDARD_ATTEMPT)
  status         AttemptStatus @default(STANDARD)
  penalty        Int?
  value          Int
  originalTime   Int?
  inspectionTime Int?
  judgeId        String?
  judge          Person?       @relation(fields: [judgeId], references: [id])
  deviceId       String?
  device         Device?       @relation(fields: [deviceId], references: [id])
  solvedAt       DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  updatedById    String?
  updatedBy      User?      @relation(fields: [updatedById], references: [id])
}

model Device {
  id                String          @id @default(uuid())
  name              String
  espId             Int?            @unique
  type              DeviceType
  batteryPercentage Int?
  roomId            String
  room              Room            @relation(fields: [roomId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  Attempt           Attempt[]
  StaffActivity     StaffActivity[]
}

model QuickAction {
  id        String   @id @default(uuid())
  name      String
  comment   String?
  giveExtra Boolean  @default(false)
  userId String
  user   User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DeviceType {
  STATION
  ATTENDANCE_SCRAMBLER
  ATTENDANCE_RUNNER
}

enum AttemptType {
  STANDARD_ATTEMPT
  EXTRA_ATTEMPT
}

enum AttemptStatus {
  STANDARD
  UNRESOLVED
  RESOLVED
  EXTRA_GIVEN
}

enum Role {
  ADMIN
  STAFF
}

enum StaffRole {
  COMPETITOR
  JUDGE
  RUNNER
  SCRAMBLER
}

enum SendingResultsFrequency {
  AFTER_SOLVE
  EVERY_5_MINUTES
  NEVER
}
