generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  password          String
  email             String
  username          String?  @unique
  notificationToken String?
  role              Role?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Person {
  id                  String    @id @default(cuid())
  registrantId        Int?
  name                String
  wcaId               String?
  countryIso2         String?
  gender              String
  canCompete          Boolean   @default(true)
  birthdate           DateTime?
  giftpackCollectedAt DateTime?
  cardId              String?   @unique
  Result              Result[]
  Attempt             Attempt[]
}

model Competition {
  id                  String  @id @default(cuid())
  wcaId               String
  usesWcaProduction   Boolean @default(true)
  name                String
  shortName           String
  countryIso2         String?
  currentGroupId      String?
  shouldCheckGroup    Boolean @default(false)
  shouldUpdateDevices Boolean @default(false)
  useStableReleases   Boolean @default(true)
  wcif                Json?
  scoretakingToken    String?
}

model Result {
  id        String    @id @default(cuid())
  personId  String
  person    Person    @relation(fields: [personId], references: [id])
  eventId   String
  roundId   String
  groupId   String
  Attempt   Attempt[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Attempt {
  id             String    @id @default(cuid())
  resultId       String
  result         Result?   @relation(fields: [resultId], references: [id])
  attemptNumber  Int
  replacedBy     Int?
  comment        String?
  isDelegate     Boolean   @default(false)
  extraGiven     Boolean   @default(false)
  isResolved     Boolean?  @default(false)
  penalty        Int?
  isExtraAttempt Boolean   @default(false)
  value          Int
  judgeId        String?
  judge          Person?   @relation(fields: [judgeId], references: [id])
  stationId      String?
  station        Station?  @relation(fields: [stationId], references: [id])
  solvedAt       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Station {
  id        String    @id @default(cuid())
  name      String
  espId     String?   @db.Text()
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Attempt   Attempt[]
}

enum Role {
  ADMIN
  DELEGATE
  STAFF
}

enum Activity {
  COMPETITOR
  JUDGE
  RUNNER
  SCRAMBLER
}
