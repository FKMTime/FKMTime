generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        String   @id @default(uuid())
  password  String
  username  String?  @unique
  role      Role?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Person {
  id                  String       @id @default(uuid())
  registrantId        Int?         @unique
  name                String
  wcaId               String?
  countryIso2         String?
  gender              String
  canCompete          Boolean      @default(true)
  birthdate           DateTime?
  giftpackCollectedAt DateTime?
  cardId              String?      @unique
  Result              Result[]
  Attempt             Attempt[]
  Attendance          Attendance[]
}

model Attendance {
  id        String    @id @default(uuid())
  personId  String
  person    Person    @relation(fields: [personId], references: [id])
  deviceId  String?
  device    Device?   @relation(fields: [deviceId], references: [id])
  groupId   String
  role      StaffRole
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([personId, groupId, role])
}

model Competition {
  id                        String         @id @default(uuid())
  wcaId                     String
  sendResultsToWcaLive      Boolean        @default(true)
  name                      String
  shortName                 String
  countryIso2               String?
  shouldUpdateDevices       Boolean        @default(false)
  releaseChannel            ReleaseChannel @default(STABLE)
  wcif                      Json?
  scoretakingToken          String?
  scoretakingTokenUpdatedAt DateTime?
}

model Room {
  id             String   @id @default(uuid())
  name           String
  color          String
  currentGroupId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  devices        Device[]
}

model Result {
  id        String    @id @default(uuid())
  personId  String
  person    Person    @relation(fields: [personId], references: [id])
  eventId   String
  roundId   String
  attempts  Attempt[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([personId, roundId])
}

model Attempt {
  id             String        @id @default(uuid())
  sessionId      String?
  resultId       String
  result         Result?       @relation(fields: [resultId], references: [id])
  attemptNumber  Int
  replacedBy     Int?
  comment        String?
  status         AttemptStatus @default(STANDARD_ATTEMPT)
  penalty        Int?
  value          Int
  inspectionTime Int?
  judgeId        String?
  judge          Person?       @relation(fields: [judgeId], references: [id])
  deviceId       String?
  device         Device?       @relation(fields: [deviceId], references: [id])
  solvedAt       DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Device {
  id                String       @id @default(uuid())
  name              String
  espId             Int?         @unique
  type              DeviceType
  batteryPercentage Int?
  roomId            String
  room              Room         @relation(fields: [roomId], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  Attempt           Attempt[]
  Attendance        Attendance[]
}

enum DeviceType {
  STATION
  ATTENDANCE_SCRAMBLER
  ATTENDANCE_RUNNER
}

enum AttemptStatus {
  STANDARD_ATTEMPT
  EXTRA_ATTEMPT
  UNRESOLVED
  RESOLVED
  EXTRA_GIVEN
}

enum ReleaseChannel {
  STABLE
  PRE_RELEASE
}

enum Role {
  ADMIN
  DELEGATE
  STAFF
}

enum StaffRole {
  JUDGE
  RUNNER
  SCRAMBLER
}
